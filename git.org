* 克隆Git上的仓库到本地。
使用
    git clone + [仓库地址]
进入仓库主目录，仓库主目录有个.git的隐藏目录，它里面包含了仓库的全部信息。删掉这个目录，仓库就会变成普通目录了。
当我们在 GitHub 上创建一个仓库时，同时生成了仓库的默认主机名 origin，并创建了默认分支 master。
GitHub 可以看成是免费的 Git 服务器，在 GitHub 上创建仓库，会自动生成一个仓库地址，主机就是指代这个仓库，主机名就等于这个仓库地址。
克隆一个 GitHub 仓库（也叫远程仓库）到本地，本地仓库则会自动关联到这个远程仓库。
    使用 
    git remote -v
    可以查看本地仓库所关联的远程仓库信息。
Git 要求对本地仓库关联的每个远程主机都必须指定一个主机名（默认为 origin），用于本地仓库识别自己关联的主机，
git remote 命令就用于管理本地仓库所关联的主机，一个本地仓库可以关联任意多个主机（即远程仓库）。
克隆仓库到本地时，还可以使用 -o 选项修改主机名，在地址的后面加上一个字段作为本地仓库的主目录名
例如：git clone -o [自定义主机名] [仓库地址] [本地仓库主目录名]

* 一次完整的修改、提交、推送操作
** 对工作区进行修改
   1. 修改之后可用  git status 查看整个仓库的状态
   2. 使用  git add [文件名] 命令跟踪此文件，即把新增文件添加到暂存区，以备提交（一共有三个区，工作区、暂存区、版本库）
   3. 如果对多个文件或目录进行了增删改 git add . 命令  全部添加到暂存区。
   4. 如果要撤销提交 执行  git reset -- 【文件名】 或者 git rm --chched 【文件名】即可
   5. git diff 命令可以用来查看工作区被跟踪文件的修改详情。注意：只有版本区的文件才是被跟踪文件。
      使用git diff --chached 查看暂存区的全部修改
** 查看提交历史
   git log 命令用来查看版本区的提交历史记录。
** 配置个人信息
   git config --global user.email "邮箱"
   git config --global user.name "用户名"
   git config -l 用以查看配置信息。
   完成后，系统自动生成Git的配置文件，就是主目录中的隐藏文件 .gitconfig
** 提交暂存区的修改到版本区
   git commit -m [提交备注]
   提交后暂存区的修改被清空，执行git log 可以查看提交记录，提交版本号是很重要的信息。
   git branch -avv 用来查看全部分支信息。
** 将本地新增的提交推送到GitHub远程仓库中
   git push
   
* 版本回退
  执行 git reset --soft HEAD^ 撤销最近的一次提交，将它修改还原到暂存区。
  --soft 表示软退回，对应的还有--hard表示硬退回。HEAD^表示撤销一次提交，HEAD^^表示撤销两次提交.....
** 处理commit时间线分叉
   版本回退 再次commit后，会出现提交时间线分叉，这是因为此提交操作不是基于远程仓库origin/master分支的最新提交版本，而是撤回了一个版本。
   这时候讲本地master分支推送到远程仓库，需要加一个选项-f，这就是强制推送。
   git push -f 
** 本地仓库commit变化记录
   如果忽然发现刚刚的版本回退操作是误操作，不需要再次执行一次版本回退操作。
   只需要执行 git  reflog 命令，它会记录本地仓库所有分支的每一次版本变化。只要本地仓库不被删除，都能回退到任何地方。
   git reflog 
   git reset --hard [版本号] 或者 git reset --hard HEAD@{2}
* 添加SSH关联授权
  1. 终端执行  ssh-keygen  命令按几次回车生成公私钥，公私钥存放在主目录下的隐藏目录 .ssh 中的两个文件中
  2. 将  ~/.ssh/id_rsa.pub  文件中的公钥内容复制到 GitHub 网页上的 SSH keys中
  3. 回到仓库主目录，点击 Use SSH 重新克隆仓库。
* 为Git设置别名
  例如：git config --global alias.st status 
  也可以直接到~/.gitconfig文件里修改
  可以使用  git config -l 命令查看配置文件
* Git分支管理
** git fetch 刷新本地分支信息
   git fetch 的作用是 刷新保存在本地仓库的远程分支信息
   git pull 的作用是  拉取远程仓库的数据到本地
   如果前面执行过 git fetch 命令， 也可以执行 git rebase origin/master 来实现 “使本地仓库分支基于远程仓库的master分支”
** 创建新的本地分支
   git branch [分支名]  创建新的分支
   git checkout [分支名]  切换分支
   git checkout -b [分支名]  创建分支并切换到新分支
   在哪个分支上创建新分支，新分支的提交记录就与哪个分支一致。新建分支并无跟踪任何远程分支
** 将新分支的提交推送到远程仓库
   执行 git push [主机名] [本地分支名]:[远程分支名] 即可将本地分支推送到远程仓库的分支中
   通常冒号前后的分支名是相同的，如果是相同的，可以省略 :[远程分支名]，如果远程分支不存在，会自动创建
** 本地分支跟踪远程分支
   git branch -u [主机名/远程分支名] [本地分支名] 将本地分支与远程分支关联，或者说使本地分支跟踪远程分支。
   如果是设置当前所在分支跟踪远程分支，最后一个参数本地分支名可以省略不写
   -u 选项是 --set-upstream 的缩写
   git branch --unset-upstream [分支名] 即可撤销该分支对远程分支的跟踪,如果撤销当前所在的分支的跟踪，分支名可以省略不写
   在推送的时候，加个 --set-upstream 或其简写 -u 选项 即可 在推送的时候自动跟踪远程分支
** 删除远程分支
   删除远程分支，使用
   git push [主机名] :[远程分支名] 此命令的原理是将空分支推送到远程分支，结果自然就是远程分支被删除
   如果一次性删除多个，可以这样：git push [主机名] :[远程分支名] :[远程分支名] :[远程分支名] 。
   也可以使用        git push [主机名] --delete [远程分支名]
** 删除本地分支
    git branch -D [分支名]
    git branch -m [原分支名] [新分支名] 可以用来给分支改名。
